<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedIndexRequest }};
use {{ namespacedModel }};
use Illuminate\Database\Eloquent\Builder;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResource;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResourceCollection;
use Tomchochola\Laratchi\Http\JsonApi\ModelResource;
use Tomchochola\Laratchi\Routing\Controller;

class {{ class }} extends Controller
{
    /**
     * Handle the incoming request.
     */
    public function __invoke({{ indexRequest }} $request): SymfonyResponse
    {
        $builder = {{ model }}::query();

        $this->select($builder, $request);
        $this->filterSearch($builder, $request);
        $this->filterId($builder, $request);
        $this->filterNotId($builder, $request);
        $this->filterMe($builder, $request);
        $this->sort($builder, $request);

        if ($request->validatedInput()->mustBool('count', false)) {
            return resolveResponseFactory()->json(['data' => $builder->getQuery()->count()]);
        }

        $data = $builder->paginate($request->validatedInput()->mustInt('take', {{ indexRequest }}::TAKE_MAX));

        return (new JsonApiResourceCollection($data, $request->validatedInput()->mustBool('select', false) ? fn ({{ model }} $model): JsonApiResource => $this->selectResource($model) : fn ({{ model }} $model): JsonApiResource => $this->indexResource($model)))->response();
    }

    /**
     * Sort query.
     */
    protected function sort(Builder $builder, {{ indexRequest }} $request): void
    {
        $sorts = $request->validatedInput()->mustArray('sort', []);

        if (! \in_array('id', $sorts, true) && ! \in_array('-id', $sorts, true)) {
            $sorts[] = '-id';
        }

        foreach ($sorts as $sort) {
            \assert(\is_string($sort));

            if (\str_starts_with($sort, '-')) {
                $builder->getQuery()->orderByDesc($builder->qualifyColumn(\mb_substr($sort, 1)));
            } else {
                $builder->getQuery()->orderBy($builder->qualifyColumn($sort));
            }
        }
    }

    /**
     * Filter by search.
     */
    protected function filterSearch(Builder $builder, {{ indexRequest }} $request): void
    {
        if ($request->validatedInput()->missing('filter.search')) {
            return;
        }

        {{ model }}::scopeSearch($builder, $request->validatedInput()->mustString('filter.search'));
    }

    /**
     * Filter by id.
     */
    protected function filterId(Builder $builder, {{ indexRequest }} $request): void
    {
        if ($request->validatedInput()->missing('filter.id')) {
            return;
        }

        {{ model }}::scopeKeys($builder, $request->validatedInput()->mustArray('filter.id', []));
    }

    /**
     * Filter by not id.
     */
    protected function filterNotId(Builder $builder, {{ indexRequest }} $request): void
    {
        if ($request->validatedInput()->missing('filter.not_id')) {
            return;
        }

        {{ model }}::scopeNotKeys($builder, $request->validatedInput()->mustArray('filter.not_id', []));
    }

    /**
     * Filter by me.
     */
    protected function filterMe(Builder $builder, {{ indexRequest }} $request): void
    {
        {{ model }}::scopeUsers($builder, [$request->me()->getKey()]);
    }

    /**
     * Modify select query.
     */
    protected function select(Builder $builder, {{ indexRequest }} $request): void
    {
        $builder->getQuery()->select($builder->qualifyColumns(['*']));
    }

    /**
     * Select resource.
     */
    protected function selectResource({{ model }} $model): JsonApiResource
    {
        return new ModelResource($model, static fn ({{ model }} $resource): array => [
            'title' => $resource->getTitle(),
        ]);
    }

    /**
     * Index resource.
     */
    protected function indexResource({{ model }} $model): JsonApiResource
    {
        return new ModelResource($model, static fn ({{ model }} $resource): array => [
            'title' => $resource->getTitle(),
            'created_at' => $resource->getCreatedAt(),
            'updated_at' => $resource->getUpdatedAt(),
        ]);
    }
}
