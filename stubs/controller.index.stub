<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedUserModel }};
use {{ namespacedModel }};
use Illuminate\Database\Eloquent\Builder;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResource;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResourceCollection;
use Tomchochola\Laratchi\Http\JsonApi\ModelResource;
use Tomchochola\Laratchi\Routing\Controller;
use Tomchochola\Laratchi\Http\ApiFormRequest;
use Tomchochola\Laratchi\Support\Parser;
use Tomchochola\Laratchi\Enums\RequestModeEnum;
use Tomchochola\Laratchi\Validation\BaseValidity;
use Tomchochola\Laratchi\Support\Resolver;
use Tomchochola\Laratchi\Support\Typer;

class {{ class }} extends Controller
{
    /**
     * Take.
     */
    public const TAKE = \PHP_INT_MAX;

    /**
     * Sort.
     */
    public const SORT = ['id', '-id', 'created_at', '-created_at', 'updated_at', '-updated_at', 'title', '-title'];

    /**
     * Handle the incoming request.
     */
    public function __invoke(ApiFormRequest $request): SymfonyResponse
    {
        $auth = $this->authorize($request);
        $validated = $this->validate($request, $auth);

        $builder = {{ model }}::query();

        $mode = $validated->mustParseNullableEnum('mode', RequestModeEnum::class) ?? RequestModeEnum::DEFAULT;

        $this->select($builder, $mode);

        $this->filterSearch($builder, $validated);
        $this->filterId($builder, $validated);
        $this->filterNotId($builder, $validated);
        $this->filterSlug($builder, $validated);
        $this->filterNotSlug($builder, $validated);
        $this->filterUserId($builder, $auth);

        $this->sort($builder, $validated);

        if ($mode === RequestModeEnum::COUNT) {
            return Resolver::resolveResponseFactory()->json(['data' => $builder->getQuery()->count()]);
        }

        $data = $builder->paginate($validated->mustParseNullableInt('take') ?? static::TAKE);

        return (new JsonApiResourceCollection(
            $data,
            $mode === RequestModeEnum::SELECT ? fn ({{ model }} $model): JsonApiResource => $this->selectResource($model) : fn ({{ model }} $model): JsonApiResource => $this->indexResource($model),
        ))->response();
    }

    /**
     * Modify select query.
     */
    protected function select(Builder $builder, RequestModeEnum $mode): void
    {
        {{ model }}::querySelect($builder);
    }

    /**
     * Sort query.
     */
    protected function sort(Builder $builder, Parser $validated): void
    {
        $sorts = $validated->mustParseNullableArray('sort') ?? [];

        if (! \in_array('id', $sorts, true) && ! \in_array('-id', $sorts, true)) {
            $sorts[] = '-id';
        }

        foreach ($sorts as $mixed) {
            $sort = Typer::assertString($mixed);

            if (\str_starts_with($sort, '-')) {
                $builder->getQuery()->orderByDesc($builder->qualifyColumn(\mb_substr($sort, 1)));
            } else {
                $builder->getQuery()->orderBy($builder->qualifyColumn($sort));
            }
        }
    }

    /**
     * Filter by search.
     */
    protected function filterSearch(Builder $builder, Parser $validated): void
    {
        if ($validated->missing('filter.search')) {
            return;
        }

        {{ model }}::scopeSearch($builder, $validated->mustParseString('filter.search'));
    }

    /**
     * Filter by id.
     */
    protected function filterId(Builder $builder, Parser $validated): void
    {
        if ($validated->missing('filter.id')) {
            return;
        }

        {{ model }}::scopeKey($builder, $validated->mustParseArray('filter.id'));
    }

    /**
     * Filter by not id.
     */
    protected function filterNotId(Builder $builder, Parser $validated): void
    {
        if ($validated->missing('filter.not_id')) {
            return;
        }

        {{ model }}::scopeNotKey($builder, $validated->mustParseArray('filter.not_id'));
    }

    /**
     * Filter by slug.
     */
    protected function filterSlug(Builder $builder, Parser $validated): void
    {
        if ($validated->missing('filter.slug')) {
            return;
        }

        {{ model }}::scopeRouteKey($builder, $validated->mustParseArray('filter.slug'));
    }

    /**
     * Filter by not slug.
     */
    protected function filterNotSlug(Builder $builder, Parser $validated): void
    {
        if ($validated->missing('filter.not_slug')) {
            return;
        }

        {{ model }}::scopeNotRouteKey($builder, $validated->mustParseArray('filter.not_slug'));
    }

    /**
     * Filter by user id.
     */
    protected function filterUserId(Builder $builder, User $auth): void
    {
        {{ model }}::scopeUserId($builder, [$auth->getKey()]);
    }

    /**
     * Select resource.
     */
    protected function selectResource({{ model }} $model): JsonApiResource
    {
        return $model->resource();
    }

    /**
     * Index resource.
     */
    protected function indexResource({{ model }} $model): JsonApiResource
    {
        return $model->resource();
    }

    /**
     * Authorize the incoming request.
     */
    protected function authorize(ApiFormRequest $request): {{ userModel }}
    {
        return {{ userModel }}::mustAuth();
    }

    /**
     * Validate the incoming request.
     */
    protected function validate(ApiFormRequest $request, {{ userModel }} $auth): Parser
    {
        $baseValidity = new BaseValidity();

        return $request->validate(
            $baseValidity->predefined(
                filter: true,
                filterId: true,
                filterNotId: true,
                filterSlug: true,
                filterNotSlug: true,
                filterSearch: true,
                take: static::TAKE,
                mode: true,
                sort: static::SORT,
                page: true,
            ),
        );
    }
}
