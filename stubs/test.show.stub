<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedShowController }};
use {{ namespacedValidity }};
use {{ namespacedModel }};
use {{ namespacedUserModel }};
use {{ namespacedFactory }};
use {{ namespacedUserModelFactory }};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tomchochola\Laratchi\Testing\JsonApiValidator;

class {{ class }} extends TestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider localeDataProvider
     */
    public function test_fetch_{{ table }}_show(string $locale): void
    {
        $this->locale($locale);

        $me = {{ userModelFactory }}::new()->createOne();

        \assert($me instanceof {{ userModel }});

        $model = {{ factory }}::new()->for($me)->createOne();

        \assert($model instanceof {{ model }});

        $query = fake()->randomElement([['id' => $model->getKey()], ['slug' => $model->getRouteKey()]]);

        $response = $this->be($me)->get(resolveUrlFactory()->action({{ showController }}::class, $query));

        $response->assertOk();

        $this->validateJsonApiResponse($response, $this->structure{{ model }}Show(), []);
    }

    /**
     * {{ model }} show structure.
     */
    protected function structure{{ model }}Show(): JsonApiValidator
    {
        $validity = new {{ validity }}();

        return $this->structure('{{ table }}', [
            'title' => $validity->title()->required(),
            'created_at' => $validity->createdAt()->required(),
            'updated_at' => $validity->updatedAt()->required(),
        ]);
    }
}
