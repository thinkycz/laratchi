<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedIndexController }};
use {{ namespacedIndexRequest }};
use {{ namespacedValidity }};
use {{ namespacedModel }};
use {{ namespacedUserModel }};
use {{ namespacedFactory }};
use {{ namespacedUserModelFactory }};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tomchochola\Laratchi\Testing\JsonApiValidator;

class {{ class }} extends TestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider localeDataProvider
     */
    public function test_fetch_{{ table }}_index(string $locale): void
    {
        $this->locale($locale);

        $me = {{ userModelFactory }}::new()->createOne();

        \assert($me instanceof {{ userModel }});

        $model = {{ factory }}::new()->createOne();

        \assert($model instanceof {{ model }});

        $query = [
            'filter' => [
                'id' => [$model->getKey()],
            ],
            'take' => fake()->numberBetween(1, {{ indexRequest }}::TAKE_MAX),
            'select' => false,
            'sort' => {{ indexRequest }}::SORTS,
        ];

        $response = $this->be($me, 'users')->get(resolveUrlFactory()->action({{ indexController }}::class, $query));

        $response->assertOk();

        $this->validateJsonApiCollectionResponse($response, [$this->jsonApiValidator{{ model }}Index()], []);
    }

    /**
     * @dataProvider localeDataProvider
     */
    public function test_fetch_{{ table }}_select(string $locale): void
    {
        $this->locale($locale);

        $me = {{ userModelFactory }}::new()->createOne();

        \assert($me instanceof {{ userModel }});

        $model = {{ factory }}::new()->createOne();

        \assert($model instanceof {{ model }});

        $query = [
            'filter' => [
                'id' => [$model->getKey()],
            ],
            'take' => fake()->numberBetween(1, {{ indexRequest }}::TAKE_MAX),
            'select' => true,
            'sort' => {{ indexRequest }}::SORTS,
        ];

        $response = $this->be($me, 'users')->get(resolveUrlFactory()->action({{ indexController }}::class, $query));

        $response->assertOk();

        $this->validateJsonApiCollectionResponse($response, [$this->jsonApiValidator{{ model }}Select()], []);
    }

    /**
     * {{ model }} index json api validator.
     */
    protected function jsonApiValidator{{ model }}Index(): JsonApiValidator
    {
        $validity = new {{ validity }}();

        return $this->jsonApiValidator('{{ table }}', [
            'title' => $validity->title()->required(),
            'created_at' => $validity->createdAt()->required(),
            'updated_at' => $validity->updatedAt()->required(),
        ]);
    }

    /**
     * {{ model }} select json api validator.
     */
    protected function jsonApiValidator{{ model }}Select(): JsonApiValidator
    {
        $validity = new {{ validity }}();

        return $this->jsonApiValidator('{{ table }}', [
            'title' => $validity->title()->required(),
        ]);
    }
}
