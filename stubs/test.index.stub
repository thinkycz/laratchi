<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedIndexController }};
use {{ namespacedValidity }};
use {{ namespacedModel }};
use {{ namespacedUserModel }};
use {{ namespacedFactory }};
use {{ namespacedUserModelFactory }};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tomchochola\Laratchi\Testing\JsonApiValidator;
use Tomchochola\Laratchi\Enums\RequestModeEnum;
use Tomchochola\Laratchi\Support\Resolver;
use Tomchochola\Laratchi\Support\Typer;

class {{ class }} extends TestCase
{
    use RefreshDatabase;

    /**
     * @dataProvider localeDataProvider
     */
    public function test_index_{{ table }}_default_mode(string $locale): void
    {
        $this->locale($locale);

        $auth = Typer::assertInstance({{ userModelFactory }}::new()->createOne(), {{ userModel }}::class);
        $model = Typer::assertInstance(
            {{ factory }}::new()
                ->for($auth)
                ->createOne(),
            {{ model }}::class,
        );

        $query = [
            'filter' => [
                'id' => [$model->getKey()],
                'slug' => [$model->getRouteKey()],
                'search' => $model->getTitle(),
            ],
            'take' => {{ indexController }}::TAKE,
            'sort' => {{ indexController }}::SORT,
            'page' => 1,
            'mode' => RequestModeEnum::DEFAULT,
        ];

        $response = $this->be($auth)->get(Resolver::resolveUrlGenerator()->action({{ indexController }}::class, $query));

        $response->assertOk();

        $this->validateJsonApiCollectionResponse($response, [$this->structure{{ model }}Index()], []);
    }

    /**
     * @dataProvider localeDataProvider
     */
    public function test_index_{{ table }}_select_mode(string $locale): void
    {
        $this->locale($locale);

        $auth = Typer::assertInstance({{ userModelFactory }}::new()->createOne(), {{ userModel }}::class);
        $model = Typer::assertInstance(
            {{ factory }}::new()
                ->for($auth)
                ->createOne(),
            {{ model }}::class,
        );

        $query = [
            'filter' => [
                'id' => [$model->getKey()],
                'slug' => [$model->getRouteKey()],
                'search' => $model->getTitle(),
            ],
            'take' => {{ indexController }}::TAKE,
            'sort' => {{ indexController }}::SORT,
            'page' => 1,
            'mode' => RequestModeEnum::SELECT,
        ];

        $response = $this->be($auth)->get(Resolver::resolveUrlGenerator()->action({{ indexController }}::class, $query));

        $response->assertOk();

        $this->validateJsonApiCollectionResponse($response, [$this->structure{{ model }}Select()], []);
    }

    /**
     * @dataProvider localeDataProvider
     */
    public function test_index_{{ table }}_count_mode(string $locale): void
    {
        $this->locale($locale);

        $auth = Typer::assertInstance({{ userModelFactory }}::new()->createOne(), {{ userModel }}::class);
        $model = Typer::assertInstance(
            {{ factory }}::new()
                ->for($auth)
                ->createOne(),
            {{ model }}::class,
        );

        $query = [
            'filter' => [
                'id' => [$model->getKey()],
                'slug' => [$model->getRouteKey()],
                'search' => $model->getTitle(),
            ],
            'mode' => RequestModeEnum::COUNT,
        ];

        $response = $this->be($auth)->get(Resolver::resolveUrlGenerator()->action({{ indexController }}::class, $query));

        $response->assertOk();

        $response->assertExactJson([
            'data' => 1,
        ]);
    }

    /**
     * {{ model }} index structure.
     */
    protected function structure{{ model }}Index(): JsonApiValidator
    {
        $validity = new {{ validity }}();

        return $this->structure('{{ table }}', [
            'title' => $validity->title()->required(),
        ]);
    }

    /**
     * {{ model }} select structure.
     */
    protected function structure{{ model }}Select(): JsonApiValidator
    {
        $validity = new {{ validity }}();

        return $this->structure('{{ table }}', [
            'title' => $validity->title()->required(),
        ]);
    }
}
