<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedUpdateRequest }};
use {{ namespacedModel }};
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Tomchochola\Laratchi\Routing\TransactionController;
use Tomchochola\Laratchi\Validation\ValidatedInput;

class {{ class }} extends TransactionController
{
    /**
     * Handle the incoming request.
     */
    public function __invoke({{ updateRequest }} $request): SymfonyResponse
    {
        $me  = $request->me();

        $this->validateUnique($request);

        foreach ($request->validatedInput()->validatedInputs('items', []) as $item) {
            {{ model }}::mustFindById($item->mustInt('id'))->update($item->only(['title']));
        }

        return resolveResponseFactory()->noContent();
    }

    /**
     * Validate given data is unique.
     */
    protected function validateUnique({{ updateRequest }} $request, ValidatedInput $item, int $index): void
    {
        foreach ($request->validatedInput()->validatedInputs('items', []) as $item) {
            $title = $item->mustString('title');

            [$hit] = $this->throttle($this->limit('title'), $this->onThrottle($request, ["items.{$index}.title"]));

            if ({{ model }}::query()->whereKeyNot($item->mustInt('id'))->getQuery()->where('title', $title)->exists()) {
                $hit();
                $request->throwUniqueValidationException(["items.{$index}.title"]);
            }
        }
    }
}
