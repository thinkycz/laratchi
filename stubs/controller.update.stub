<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedUpdateRequest }};
use {{ namespacedModel }};
use Illuminate\Cache\RateLimiting\Limit;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Tomchochola\Laratchi\Routing\TransactionController;

class {{ class }} extends TransactionController
{
    /**
     * Handle the incoming request.
     */
    public function __invoke({{ updateRequest }} $request): SymfonyResponse
    {
        $this->validateUnique($request);

        $model = {{ model }}::create($request->validatedInput()->only(['title']));

        return resolveResponseFactory()->noContent();
    }

    /**
     * Validate given data is unique.
     */
    protected function validateUnique({{ updateRequest }} $request): void
    {
        $title = $request->validatedInput()->string('title');

        if ($title !== null) {
            [$hit] = $this->throttle(Limit::perMinutes(15, 5)->by(requestSignature()->data('key', 'title')->user($request->resolveMe())->hash()));

            $qualifier = new {{ model }}();

            if ({{ model }}::query()->whereKeyNot($request->resolve{{ model }}()->getKey())->getQuery()->where($qualifier->qualifyColumn('title'), $title)->exists()) {
                $hit();
                $request->throwUniqueValidationException(['title']);
            }
        }
    }
}
