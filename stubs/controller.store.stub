<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedValidity }};
use {{ namespacedUserModel }};
use {{ namespacedModel }};
use Illuminate\Support\Collection;
use Symfony\Component\HttpFoundation\Response as SymfonyResponse;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResource;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResourceCollection;
use Tomchochola\Laratchi\Http\JsonApi\ModelResource;
use Tomchochola\Laratchi\Routing\TransactionController;
use Tomchochola\Laratchi\Http\ApiFormRequest;
use Tomchochola\Laratchi\Support\Parser;
use Tomchochola\Laratchi\Validation\BaseValidity;

class {{ class }} extends TransactionController
{
    /**
     * Handle the incoming request.
     */
    public function __invoke(ApiFormRequest $request): SymfonyResponse
    {
        $auth = $this->authorize($request);
        $validated = $this->validate($request, $auth);

        $this->validateUnique($request, $validated);

        $collection = new Collection();

        foreach ($validated->parsers('data') as $parser) {
            $model = new {{ model }}($parser->merge(['user_id' => $auth->getKey()])->only(['user_id', 'title']));

            $model->save();

            $collection->push($model);
        }

        return (new JsonApiResourceCollection($collection, static fn ({{ model }} $model): JsonApiResource => new ModelResource($model)))->response();
    }

    /**
     * Validate given data is unique.
     */
    protected function validateUnique(ApiFormRequest $request, Parser $validated): void
    {
        foreach ($validated->parsers('data') as $index => $parser) {
            $throttler = $request
                ->throttler('title', 1, 15, static function (int $seconds) use ($request, $index): never {
                    $request
                        ->thrower()
                        ->throttled(["data.{$index}.title"], $seconds)
                        ->throw();
                })
                ->throttle();

            if (
                {{ model }}::query()
                    ->getQuery()
                    ->where('title', $parser->mustParseString('title'))
                    ->exists()
            ) {
                $throttler->hit();
                $request
                    ->thrower()
                    ->unique(["data.{$index}.title"])
                    ->throw();
            }
        }
    }

    /**
     * Authorize the incoming request.
     */
    protected function authorize(ApiFormRequest $request): {{ userModel }}
    {
        return {{ userModel }}::mustAuth();
    }

    /**
     * Validate the incoming request.
     */
    protected function validate(ApiFormRequest $request, {{ userModel }} $auth): Parser
    {
        $baseValidity = new BaseValidity();
        $validity = new {{ validity }}();

        return $request->validate(
            \array_replace($baseValidity->predefined(data: true), [
                'data.*.title' => $validity
                    ->title()
                    ->required()
                    ->distinct(),
            ]),
        );
    }
}
