<?php

declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Tomchochola\Laratchi\Database\Model;
use Tomchochola\Laratchi\Http\JsonApi\JsonApiResource;
use Tomchochola\Laratchi\Http\JsonApi\ModelResource;
use Tomchochola\Laratchi\Config\Config;

class {{ class }} extends Model
{
    /**
     * @inheritDoc
     *
     * @var array<mixed>
     */
    protected $casts = [
        'user_id' => 'integer',
    ];

    /**
     * Modify embed query.
     */
    public static function queryEmbed(Builder $builder): void
    {
        $builder->getQuery()->select($builder->qualifyColumn('*'));
    }

    /**
     * Search scope.
     */
    public static function scopeSearch(Builder $builder, string $search): void
    {
        if (Config::inject()->appEnvIs(['testing'])) {
            $builder->getQuery()->where($builder->qualifyColumn('title'), $search);
        } else {
            $builder->getQuery()->whereFullText($builder->qualifyColumn('title'), $search);
        }
    }

    /**
     * Scope user id.
     *
     * @param array<mixed> $ids
     */
    public static function scopeUserId(Builder $builder, array $ids): void
    {
        static::scopeIn($builder, 'user_id', $ids);
    }

    /**
     * Title getter.
     */
    public function getTitle(): string
    {
        return $this->assertString('title');
    }

    /**
     * User relationship.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id', 'id', 'user');
    }

    /**
     * User getter.
     */
    public function getUser(): User
    {
        return $this->assertRelationship('user', User::class);
    }

    /**
     * User id getter.
     */
    public function getUserId(): int
    {
        return $this->assertInt('user_id');
    }

    /**
     * Embed resource.
     */
    public function embedResource(): JsonApiResource
    {
        return new ModelResource($this, static function (self $resource): array {
            return [
                'title' => $resource->getTitle(),
            ];
        });
    }
}
